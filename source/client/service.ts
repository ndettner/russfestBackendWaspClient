// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

import * as wasmclient from "../wasmclient"
import * as events from "./events"
import {Shop} from "../model/shop";

const ArgNewSCAdress = "NewSCAdress";
const ArgSCAddress = "SCAddress";
const ArgFee = "fee";
const ArgMusician = "musician";
const ArgMusicianName = "musicianName";
const ArgName = "name";
const ArgNewHname = "newHname";
const ArgNewOwner = "newOwner";
const ArgNewfee = "newfee";
const ArgOwner = "owner";
const ArgProduct = "product";
const ArgProductType = "productType";
const ArgRequestID = "requestID";
const ArgShop = "shop";
const ArgShopHname = "shopHname";
const ArgShopName = "shopName";
const ArgShopOwner = "shopOwner";

const ResScAgentId = "ScAgentId";
const ResCanProduce = "canProduce";
const ResDeniedShopRequests = "deniedShopRequests";
const ResErrorMessage = "errorMessage";
const ResMessage = "message";
const ResMusicians = "musicians";
const ResMusiciansWithoutShop = "musiciansWithoutShop";
const ResOpenShopRequest = "openShopRequest";
const ResOwner = "owner";
const ResPingSuccessful = "pingSuccessful";
const ResProducts = "products";
const ResTestString = "testString";
const ResTimeslots = "timeslots";

///////////////////////////// acceptShop /////////////////////////////

export class AcceptShopFunc extends wasmclient.ClientFunc {
	private args: wasmclient.Arguments = new wasmclient.Arguments();

	public shopName(v: string): void {
		this.args.set(ArgShopName, this.args.fromString(v));
	}

	public async post(): Promise<wasmclient.RequestID> {
		this.args.mandatory(ArgShopName);
		return await super.post(0x8dbc2867, this.args);
	}
}

///////////////////////////// addMusician /////////////////////////////

export class AddMusicianFunc extends wasmclient.ClientFunc {
	private args: wasmclient.Arguments = new wasmclient.Arguments();

	public name(v: string): void {
		this.args.set(ArgName, this.args.fromString(v));
	}

	public shop(v: string): void {
		this.args.set(ArgShop, this.args.fromString(v));
	}

	public async post(): Promise<wasmclient.RequestID> {
		this.args.mandatory(ArgName);
		return await super.post(0x793f88c3, this.args);
	}
}

///////////////////////////// buyMerch /////////////////////////////

export class BuyMerchFunc extends wasmclient.ClientFunc {
	private args: wasmclient.Arguments = new wasmclient.Arguments();

	public musician(v: string): void {
		this.args.set(ArgMusician, this.args.fromString(v));
	}

	public productType(v: string): void {
		this.args.set(ArgProductType, this.args.fromString(v));
	}

	public shopName(v: string): void {
		this.args.set(ArgShopName, this.args.fromString(v));
	}

	public async post(): Promise<wasmclient.RequestID> {
		this.args.mandatory(ArgMusician);
		this.args.mandatory(ArgProductType);
		this.args.mandatory(ArgShopName);
		return await super.post(0xb5389038, this.args);
	}
}

///////////////////////////// callCheckProduct /////////////////////////////

/* export class CallCheckProductFunc extends wasmclient.ClientFunc {
	private args: wasmclient.Arguments = new wasmclient.Arguments();
	
	public product(v: ): void {
		this.args.set(ArgProduct, this.args.fromProductTemplate(v));
	}
	
	public async post(): Promise<wasmclient.RequestID> {
		return await super.post(0xdfd91d1f, this.args);
	} 
}
*/
export class CallCheckProductResults extends wasmclient.Results {

	canProduce(): boolean {
		return this.toBool(this.get(ResCanProduce));
	}

	messageExists(): boolean {
		return this.exists(ResMessage)
	}

	message(): string {
		return this.toString(this.get(ResMessage));
	}
}

///////////////////////////// callPayStore /////////////////////////////

export class CallPayStoreFunc extends wasmclient.ClientFunc {
	private args: wasmclient.Arguments = new wasmclient.Arguments();

	public shopName(v: string): void {
		this.args.set(ArgShopName, this.args.fromString(v));
	}

	public async post(): Promise<wasmclient.RequestID> {
		this.args.mandatory(ArgShopName);
		return await super.post(0xc8ab38d7, this.args);
	}
}

///////////////////////////// callPingShop /////////////////////////////

export class CallPingShopFunc extends wasmclient.ClientFunc {

	public async post(): Promise<wasmclient.RequestID> {
		return await super.post(0xc6022857, null);
	}
}

export class CallPingShopResults extends wasmclient.Results {

	pingSuccessful(): boolean {
		return this.toBool(this.get(ResPingSuccessful));
	}
}

///////////////////////////// cancelShopRequest /////////////////////////////

export class CancelShopRequestFunc extends wasmclient.ClientFunc {
	private args: wasmclient.Arguments = new wasmclient.Arguments();

	public name(v: string): void {
		this.args.set(ArgName, this.args.fromString(v));
	}

	public async post(): Promise<wasmclient.RequestID> {
		this.args.mandatory(ArgName);
		return await super.post(0xbc07aac0, this.args);
	}
}

///////////////////////////// denyShop /////////////////////////////

export class DenyShopFunc extends wasmclient.ClientFunc {
	private args: wasmclient.Arguments = new wasmclient.Arguments();

	public shopName(v: string): void {
		this.args.set(ArgShopName, this.args.fromString(v));
	}

	public async post(): Promise<wasmclient.RequestID> {
		this.args.mandatory(ArgShopName);
		return await super.post(0x19e94b0c, this.args);
	}
}

///////////////////////////// init /////////////////////////////

export class InitFunc extends wasmclient.ClientFunc {
	private args: wasmclient.Arguments = new wasmclient.Arguments();

	public owner(v: wasmclient.AgentID): void {
		this.args.set(ArgOwner, this.args.fromAgentID(v));
	}

	public async post(): Promise<wasmclient.RequestID> {
		return await super.post(0x1f44d644, this.args);
	}
}

///////////////////////////// requestShopLicence /////////////////////////////


export class RequestShopLicenceFunc extends wasmclient.ClientFunc {
	private args: wasmclient.Arguments = new wasmclient.Arguments();
	
	public fee(v: wasmclient.Int64): void {
		this.args.set(ArgFee, this.args.fromInt64(v));
	}
	
	public musicianName(v: string): void {
		this.args.set(ArgMusicianName, this.args.fromString(v));
	}
	
	public name(v: string): void {
		this.args.set(ArgName, this.args.fromString(v));
	}
	
	public shopHname(v: wasmclient.Hname): void {
		this.args.set(ArgShopHname, this.args.fromHname(v));
	}
	
	public async post(): Promise<wasmclient.RequestID> {
		this.args.mandatory(ArgFee);
		this.args.mandatory(ArgMusicianName);
		this.args.mandatory(ArgName);
		this.args.mandatory(ArgShopHname);
		return await super.post(0x5b4431aa, this.args);
	}
}

///////////////////////////// setOwner /////////////////////////////

export class SetOwnerFunc extends wasmclient.ClientFunc {
	private args: wasmclient.Arguments = new wasmclient.Arguments();

	public newOwner(v: wasmclient.AgentID): void {
		this.args.set(ArgNewOwner, this.args.fromAgentID(v));
	}

	public async post(): Promise<wasmclient.RequestID> {
		this.args.mandatory(ArgNewOwner);
		return await super.post(0x2a15fe7b, this.args);
	}
}

///////////////////////////// updateDeniedShopRequest /////////////////////////////

export class UpdateDeniedShopRequestFunc extends wasmclient.ClientFunc {
	private args: wasmclient.Arguments = new wasmclient.Arguments();
	
	public newHname(v: wasmclient.Hname): void {
		this.args.set(ArgNewHname, this.args.fromHname(v));
	}
	
	public newfee(v: wasmclient.Int64): void {
		this.args.set(ArgNewfee, this.args.fromInt64(v));
	}
	
	public shopName(v: string): void {
		this.args.set(ArgShopName, this.args.fromString(v));
	}
	
	public async post(): Promise<wasmclient.RequestID> {
		this.args.mandatory(ArgShopName);
		return await super.post(0xa7c5088c, this.args);
	}
}

///////////////////////////// getAgendID /////////////////////////////

export class GetAgendIDView extends wasmclient.ClientView {

	public async call(): Promise<GetAgendIDResults> {
		const res = new GetAgendIDResults();
		await this.callView("getAgendID", null, res);
		return res;
	}
}

export class GetAgendIDResults extends wasmclient.Results {

	scAgentId(): wasmclient.AgentID {
		return this.toAgentID(this.get(ResScAgentId));
	}
}

///////////////////////////// getAllOpenShopRequests /////////////////////////////

export class GetAllOpenShopRequestsView extends wasmclient.ClientView {

	public async call(): Promise<GetAllOpenShopRequestsResults> {
		const res = new GetAllOpenShopRequestsResults();
		await this.callView("getAllOpenShopRequests", null, res);
		return res;
	}
}

export class GetAllOpenShopRequestsResults extends wasmclient.Results {

	openShopRequest(): Shop {
		return Shop.fromBytes(this.get(ResOpenShopRequest));
	}
}

///////////////////////////// getAllProducts /////////////////////////////

/* export class GetAllProductsView extends wasmclient.ClientView {

	public async call(): Promise<GetAllProductsResults> {
		const res = new GetAllProductsResults();
		await this.callView("getAllProducts", null, res);
		return res;
	}
}

export class GetAllProductsResults extends wasmclient.Results {

	products(): Product {
		return Product.fromBytes(this.get(ResProducts));
	}
} */

///////////////////////////// getDeniedShopRequests /////////////////////////////

/* export class GetDeniedShopRequestsView extends wasmclient.ClientView {
	private args: wasmclient.Arguments = new wasmclient.Arguments();
	
	public shopOwner(v: wasmclient.AgentID): void {
		this.args.set(ArgShopOwner, this.args.fromAgentID(v));
	}

	public async call(): Promise<GetDeniedShopRequestsResults> {
		this.args.mandatory(ArgShopOwner);
		const res = new GetDeniedShopRequestsResults();
		await this.callView("getDeniedShopRequests", this.args, res);
		return res;
	}
}

export class GetDeniedShopRequestsResults extends wasmclient.Results {

	deniedShopRequests(): Shop {
		return Shop.fromBytes(this.get(ResDeniedShopRequests));
	}
}
 */
///////////////////////////// getErrorMessagesView /////////////////////////////

export class GetErrorMessagesViewView extends wasmclient.ClientView {
	private args: wasmclient.Arguments = new wasmclient.Arguments();

	public requestID(v: string): void {
		this.args.set(ArgRequestID, this.args.fromString(v));
	}

	public async call(): Promise<GetErrorMessagesViewResults> {
		this.args.mandatory(ArgRequestID);
		const res = new GetErrorMessagesViewResults();
		await this.callView("getErrorMessagesView", this.args, res);
		return res;
	}
}

export class GetErrorMessagesViewResults extends wasmclient.Results {

	errorMessage(): string {
		return this.toString(this.get(ResErrorMessage));
	}
}

///////////////////////////// getMusicians /////////////////////////////

/* export class GetMusiciansView extends wasmclient.ClientView {

	public async call(): Promise<GetMusiciansResults> {
		const res = new GetMusiciansResults();
		await this.callView("getMusicians", null, res);
		return res;
	}
}

export class GetMusiciansResults extends wasmclient.Results {

	musicians(): Musician {
		return Musician.fromBytes(this.get(ResMusicians));
	}
} */

///////////////////////////// getMusiciansWithoutShop /////////////////////////////
/* 
export class GetMusiciansWithoutShopView extends wasmclient.ClientView {

	public async call(): Promise<GetMusiciansWithoutShopResults> {
		const res = new GetMusiciansWithoutShopResults();
		await this.callView("getMusiciansWithoutShop", null, res);
		return res;
	}
}

export class GetMusiciansWithoutShopResults extends wasmclient.Results {

	musiciansWithoutShop(): Musician {
		return Musician.fromBytes(this.get(ResMusiciansWithoutShop));
	}
}
 */
///////////////////////////// getOpenShopRequest /////////////////////////////

/* export class GetOpenShopRequestView extends wasmclient.ClientView {
	private args: wasmclient.Arguments = new wasmclient.Arguments();
	
	public shopOwner(v: wasmclient.AgentID): void {
		this.args.set(ArgShopOwner, this.args.fromAgentID(v));
	}

	public async call(): Promise<GetOpenShopRequestResults> {
		this.args.mandatory(ArgShopOwner);
		const res = new GetOpenShopRequestResults();
		await this.callView("getOpenShopRequest", this.args, res);
		return res;
	}
}

export class GetOpenShopRequestResults extends wasmclient.Results {

	openShopRequest(): Shop {
		return Shop.fromBytes(this.get(ResOpenShopRequest));
	}
}
 */
///////////////////////////// getOwner /////////////////////////////

export class GetOwnerView extends wasmclient.ClientView {

	public async call(): Promise<GetOwnerResults> {
		const res = new GetOwnerResults();
		await this.callView("getOwner", null, res);
		return res;
	}
}

export class GetOwnerResults extends wasmclient.Results {

	owner(): wasmclient.AgentID {
		return this.toAgentID(this.get(ResOwner));
	}
}

///////////////////////////// getSpecificProducts /////////////////////////////

/* export class GetSpecificProductsView extends wasmclient.ClientView {
	private args: wasmclient.Arguments = new wasmclient.Arguments();
	
	public musician(v: string): void {
		this.args.set(ArgMusician, this.args.fromString(v));
	}

	public async call(): Promise<GetSpecificProductsResults> {
		this.args.mandatory(ArgMusician);
		const res = new GetSpecificProductsResults();
		await this.callView("getSpecificProducts", this.args, res);
		return res;
	}
}

export class GetSpecificProductsResults extends wasmclient.Results {

	products(): Product {
		return Product.fromBytes(this.get(ResProducts));
	}
}
 */
///////////////////////////// getTimeslots /////////////////////////////

/* export class GetTimeslotsView extends wasmclient.ClientView {

	public async call(): Promise<GetTimeslotsResults> {
		const res = new GetTimeslotsResults();
		await this.callView("getTimeslots", null, res);
		return res;
	}
}

export class GetTimeslotsResults extends wasmclient.Results {

	timeslots(): Timeslot {
		return Timeslot.fromBytes(this.get(ResTimeslots));
	}
}
 */
///////////////////////////// testView /////////////////////////////

export class TestViewView extends wasmclient.ClientView {

	public async call(): Promise<TestViewResults> {
		const res = new TestViewResults();
		await this.callView("testView", null, res);
		return res;
	}
}

export class TestViewResults extends wasmclient.Results {

	testString(): string {
		return this.toString(this.get(ResTestString));
	}
}

///////////////////////////// RussfestService /////////////////////////////

export class RussfestService extends wasmclient.Service {

	public constructor(cl: wasmclient.ServiceClient) {
		super(cl, 0xdebcfc69);
	}

	public newEventHandler(): events.RussfestEvents {
		return new events.RussfestEvents();
	}

	public acceptShop(): AcceptShopFunc {
		return new AcceptShopFunc(this);
	}

	public addMusician(): AddMusicianFunc {
		return new AddMusicianFunc(this);
	}

	public buyMerch(): BuyMerchFunc {
		return new BuyMerchFunc(this);
	}

	/* 	public callCheckProduct(): CallCheckProductFunc {
			return new CallCheckProductFunc(this);
		}
	 */
	public callPayStore(): CallPayStoreFunc {
		return new CallPayStoreFunc(this);
	}

	public callPingShop(): CallPingShopFunc {
		return new CallPingShopFunc(this);
	}

	public cancelShopRequest(): CancelShopRequestFunc {
		return new CancelShopRequestFunc(this);
	}

	public denyShop(): DenyShopFunc {
		return new DenyShopFunc(this);
	}

	public init(): InitFunc {
		return new InitFunc(this);
	}

	public requestShopLicence(): RequestShopLicenceFunc {
		return new RequestShopLicenceFunc(this);
	}

	public setOwner(): SetOwnerFunc {
		return new SetOwnerFunc(this);
	}

	public updateDeniedShopRequest(): UpdateDeniedShopRequestFunc {
		return new UpdateDeniedShopRequestFunc(this);
	}

	public getAgendID(): GetAgendIDView {
		return new GetAgendIDView(this);
	}

	public getAllOpenShopRequests(): GetAllOpenShopRequestsView {
		return new GetAllOpenShopRequestsView(this);
	}
	/* 
		public getAllProducts(): GetAllProductsView {
			return new GetAllProductsView(this);
		}
	
		public getDeniedShopRequests(): GetDeniedShopRequestsView {
			return new GetDeniedShopRequestsView(this);
		}
	 */
	public getErrorMessagesView(): GetErrorMessagesViewView {
		return new GetErrorMessagesViewView(this);
	}

	/* 	public getMusicians(): GetMusiciansView {
			return new GetMusiciansView(this);
		}
	
		public getMusiciansWithoutShop(): GetMusiciansWithoutShopView {
			return new GetMusiciansWithoutShopView(this);
		}
	
		public getOpenShopRequest(): GetOpenShopRequestView {
			return new GetOpenShopRequestView(this);
		} */

	public getOwner(): GetOwnerView {
		return new GetOwnerView(this);
	}
	/* 
		public getSpecificProducts(): GetSpecificProductsView {
			return new GetSpecificProductsView(this);
		}
	
		public getTimeslots(): GetTimeslotsView {
			return new GetTimeslotsView(this);
		}
	 */
	public testView(): TestViewView {
		return new TestViewView(this);
	}
}
